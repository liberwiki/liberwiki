openapi: 3.0.3
info:
  title: LiberWiki API
  version: 0.1.0
  description: LiberWiki API
paths:
  /v0/auth/signup/:
    post:
      operationId: auth_signup_create
      description: Signup with an invitation code
      summary: Signup
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SignupRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SignupRequest'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupError'
          description: ''
        '201':
          description: No response body
  /v0/auth/tokens/:
    post:
      operationId: auth_tokens_create
      description: Get your active auth token
      summary: Obtain Auth Token
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthTokenRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthTokenRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthTokenRequest'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenError'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
    delete:
      operationId: auth_tokens_destroy
      description: Delete auth token, logging out of all devices
      summary: Delete Auth Token
      tags:
      - auth
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /v0/auth/verify-email/:
    post:
      operationId: auth_verify_email_create
      description: Verify email address
      summary: Verify Email
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyEmailError'
          description: ''
        '204':
          description: No response body
  /v0/entries/:
    get:
      operationId: entries_list
      description: List entries with optional filters
      summary: List Entries
      parameters:
      - in: query
        name: author
        schema:
          type: string
          format: uuid
        description: Unique identifier for this object
      - in: query
        name: author__username
        schema:
          type: string
      - in: query
        name: bookmark_count
        schema:
          type: number
      - in: query
        name: bookmark_count__gt
        schema:
          type: number
      - in: query
        name: bookmark_count__gte
        schema:
          type: number
      - in: query
        name: bookmark_count__lt
        schema:
          type: number
      - in: query
        name: bookmark_count__lte
        schema:
          type: number
      - in: query
        name: created_at
        schema:
          type: string
          format: date-time
      - in: query
        name: created_at__gt
        schema:
          type: string
          format: date-time
      - in: query
        name: created_at__gte
        schema:
          type: string
          format: date-time
      - in: query
        name: created_at__lt
        schema:
          type: string
          format: date-time
      - in: query
        name: created_at__lte
        schema:
          type: string
          format: date-time
      - in: query
        name: dislike_count
        schema:
          type: number
      - in: query
        name: dislike_count__gt
        schema:
          type: number
      - in: query
        name: dislike_count__gte
        schema:
          type: number
      - in: query
        name: dislike_count__lt
        schema:
          type: number
      - in: query
        name: dislike_count__lte
        schema:
          type: number
      - in: query
        name: include
        schema:
          type: string
          enum:
          - author
          - author,title
          - title
        explode: false
        style: form
      - in: query
        name: is_bookmarked
        schema:
          type: boolean
      - in: query
        name: is_draft
        schema:
          type: boolean
      - in: query
        name: like_count
        schema:
          type: number
      - in: query
        name: like_count__gt
        schema:
          type: number
      - in: query
        name: like_count__gte
        schema:
          type: number
      - in: query
        name: like_count__lt
        schema:
          type: number
      - in: query
        name: like_count__lte
        schema:
          type: number
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -bookmark_count
          - -created_at
          - -dislike_count
          - -like_count
          - -updated_at
          - bookmark_count
          - created_at
          - dislike_count
          - like_count
          - updated_at
        explode: false
        style: form
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: title
        schema:
          type: string
          format: uuid
        description: Unique identifier for this object
      - in: query
        name: title__slug
        schema:
          type: string
      - in: query
        name: updated_at
        schema:
          type: string
          format: date-time
      - in: query
        name: updated_at__gt
        schema:
          type: string
          format: date-time
      - in: query
        name: updated_at__gte
        schema:
          type: string
          format: date-time
      - in: query
        name: updated_at__lt
        schema:
          type: string
          format: date-time
      - in: query
        name: updated_at__lte
        schema:
          type: string
          format: date-time
      - in: query
        name: vote
        schema:
          type: string
          enum:
          - DOWNVOTE
          - UPVOTE
        description: |-
          * `UPVOTE` - Upvote
          * `DOWNVOTE` - Downvote
      - in: query
        name: vote__isnull
        schema:
          type: boolean
      tags:
      - entries
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEntryList'
          description: ''
        '401':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: ''
    post:
      operationId: entries_create
      description: |
        Permissions:
            READER can't create entries,
            NEW_RECRUIT can create 1 entry per day,
            CONTRIBUTOR and TRUSTED can create as many entries as they want.
      summary: Create Entry
      tags:
      - entries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EntryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EntryRequest'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryError'
          description: ''
        '401':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: ''
  /v0/entries/{id}/:
    get:
      operationId: entries_retrieve
      description: Retrieve entry by id
      summary: Retrieve Entry
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
          description: Unique identifier for this object
        required: true
      - in: query
        name: include
        schema:
          type: string
          enum:
          - author
          - author,title
          - title
        explode: false
        style: form
      tags:
      - entries
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
          description: ''
        '401':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: ''
    put:
      operationId: entries_update
      description: Only the author can update the entry.
      summary: Put Entry
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
          description: Unique identifier for this object
        required: true
      tags:
      - entries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntryUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EntryUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EntryUpdateRequest'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryError'
          description: ''
        '401':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: ''
    patch:
      operationId: entries_partial_update
      description: Only the author can update the entry.
      summary: Patch Entry
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
          description: Unique identifier for this object
        required: true
      tags:
      - entries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEntryUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEntryUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEntryUpdateRequest'
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryError'
          description: ''
        '401':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: ''
    delete:
      operationId: entries_destroy
      description: Only the author can delete the entry.
      summary: Delete Entry
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
          description: Unique identifier for this object
        required: true
      tags:
      - entries
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryDestroyError'
          description: ''
        '401':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: ''
  /v0/entries/{id}/bookmark/:
    post:
      operationId: entries_bookmark_create
      description: Bookmark an entry by id
      summary: Bookmark Entry
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
          description: Unique identifier for this object
        required: true
      tags:
      - entries
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '401':
          description: No response body
  /v0/entries/{id}/downvote/:
    post:
      operationId: entries_downvote_create
      description: Cast an up vote to an entry by id
      summary: Downvote Entry
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
          description: Unique identifier for this object
        required: true
      tags:
      - entries
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '401':
          description: No response body
  /v0/entries/{id}/unbookmark/:
    post:
      operationId: entries_unbookmark_create
      description: Remove bookmark from entry by id
      summary: Remove Entry Bookmark
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
          description: Unique identifier for this object
        required: true
      tags:
      - entries
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '401':
          description: No response body
  /v0/entries/{id}/unvote/:
    post:
      operationId: entries_unvote_create
      description: Remove vote from entry by id
      summary: Remove Entry Vote
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
          description: Unique identifier for this object
        required: true
      tags:
      - entries
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '401':
          description: No response body
  /v0/entries/{id}/upvote/:
    post:
      operationId: entries_upvote_create
      description: Cast a down vote to an entry by id
      summary: Upvote Entry
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
          description: Unique identifier for this object
        required: true
      tags:
      - entries
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '401':
          description: No response body
  /v0/invitations/:
    get:
      operationId: invitations_list
      description: List invitations with optional filters
      summary: List Invitations
      parameters:
      - in: query
        name: include
        schema:
          type: string
          enum:
          - used_by
        explode: false
        style: form
      - in: query
        name: ordering
        schema:
          type: string
        explode: false
        style: form
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - invitations
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedInvitationList'
          description: ''
        '401':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: ''
    post:
      operationId: invitations_create
      description: |
        Permissions:
            READER can't create invites,
            NEW_RECRUIT can't create invites,
            CONTRIBUTOR can create 1 invite until that user is processed.
            TRUSTED can create as many invites as they want.
      summary: Create Invitation
      tags:
      - invitations
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationError'
          description: ''
        '401':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: ''
  /v0/invitations/{id}/:
    get:
      operationId: invitations_retrieve
      description: Retrieve invitation by id
      summary: Retrieve Invitation
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
          description: Unique identifier for this object
        required: true
      - in: query
        name: include
        schema:
          type: string
          enum:
          - used_by
        explode: false
        style: form
      tags:
      - invitations
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
          description: ''
        '401':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: ''
  /v0/titles/:
    get:
      operationId: titles_list
      description: List titles with optional filters
      summary: List Titles
      parameters:
      - in: query
        name: created_at
        schema:
          type: string
          format: date-time
      - in: query
        name: created_at__gt
        schema:
          type: string
          format: date-time
      - in: query
        name: created_at__gte
        schema:
          type: string
          format: date-time
      - in: query
        name: created_at__lt
        schema:
          type: string
          format: date-time
      - in: query
        name: created_at__lte
        schema:
          type: string
          format: date-time
      - in: query
        name: entry_count
        schema:
          type: number
      - in: query
        name: entry_count__gt
        schema:
          type: number
      - in: query
        name: entry_count__gte
        schema:
          type: number
      - in: query
        name: entry_count__lt
        schema:
          type: number
      - in: query
        name: entry_count__lte
        schema:
          type: number
      - in: query
        name: include
        schema:
          type: string
          enum:
          - created_by
        explode: false
        style: form
      - in: query
        name: name
        schema:
          type: string
      - in: query
        name: name__contains
        schema:
          type: string
      - in: query
        name: name__icontains
        schema:
          type: string
      - in: query
        name: name__iexact
        schema:
          type: string
      - in: query
        name: ordering
        schema:
          type: string
        explode: false
        style: form
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: updated_at
        schema:
          type: string
          format: date-time
      - in: query
        name: updated_at__gt
        schema:
          type: string
          format: date-time
      - in: query
        name: updated_at__gte
        schema:
          type: string
          format: date-time
      - in: query
        name: updated_at__lt
        schema:
          type: string
          format: date-time
      - in: query
        name: updated_at__lte
        schema:
          type: string
          format: date-time
      tags:
      - titles
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTitleList'
          description: ''
        '401':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: ''
    post:
      operationId: titles_create
      description: Create a new title
      summary: Create Title
      tags:
      - titles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TitleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TitleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TitleRequest'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Title'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TitleError'
          description: ''
        '401':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: ''
  /v0/titles/{id}/:
    get:
      operationId: titles_retrieve
      description: Retrieve title by id
      summary: Retrieve Title
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
          description: Unique identifier for this object
        required: true
      - in: query
        name: include
        schema:
          type: string
          enum:
          - created_by
        explode: false
        style: form
      tags:
      - titles
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Title'
          description: ''
        '401':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: ''
    delete:
      operationId: titles_destroy
      description: Delete an existing Title by id
      summary: Delete Title
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
          description: Unique identifier for this object
        required: true
      tags:
      - titles
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TitleDestroyError'
          description: ''
        '401':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: ''
  /v0/titles/{id}/bookmark/:
    post:
      operationId: titles_bookmark_create
      description: Bookmark a title by id
      summary: Bookmark Title
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
          description: Unique identifier for this object
        required: true
      tags:
      - titles
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '401':
          description: No response body
  /v0/titles/{id}/unbookmark/:
    post:
      operationId: titles_unbookmark_create
      description: Remove bookmark from title by id
      summary: Remove Title Bookmark
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
          description: Unique identifier for this object
        required: true
      tags:
      - titles
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '401':
          description: No response body
  /v0/users/:
    get:
      operationId: users_list
      description: List users with optional filters
      summary: List Users
      parameters:
      - in: query
        name: created_at
        schema:
          type: string
          format: date-time
      - in: query
        name: created_at__gt
        schema:
          type: string
          format: date-time
      - in: query
        name: created_at__gte
        schema:
          type: string
          format: date-time
      - in: query
        name: created_at__lt
        schema:
          type: string
          format: date-time
      - in: query
        name: created_at__lte
        schema:
          type: string
          format: date-time
      - in: query
        name: entry_count
        schema:
          type: number
      - in: query
        name: entry_count__gt
        schema:
          type: number
      - in: query
        name: entry_count__gte
        schema:
          type: number
      - in: query
        name: entry_count__lt
        schema:
          type: number
      - in: query
        name: entry_count__lte
        schema:
          type: number
      - in: query
        name: include
        schema:
          type: string
        explode: false
        style: form
      - in: query
        name: is_active
        schema:
          type: boolean
      - in: query
        name: is_staff
        schema:
          type: boolean
      - in: query
        name: is_superuser
        schema:
          type: boolean
      - in: query
        name: ordering
        schema:
          type: string
        explode: false
        style: form
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: title_count
        schema:
          type: number
      - in: query
        name: title_count__gt
        schema:
          type: number
      - in: query
        name: title_count__gte
        schema:
          type: number
      - in: query
        name: title_count__lt
        schema:
          type: number
      - in: query
        name: title_count__lte
        schema:
          type: number
      - in: query
        name: updated_at
        schema:
          type: string
          format: date-time
      - in: query
        name: updated_at__gt
        schema:
          type: string
          format: date-time
      - in: query
        name: updated_at__gte
        schema:
          type: string
          format: date-time
      - in: query
        name: updated_at__lt
        schema:
          type: string
          format: date-time
      - in: query
        name: updated_at__lte
        schema:
          type: string
          format: date-time
      - in: query
        name: username__icontains
        schema:
          type: string
      - in: query
        name: username__iexact
        schema:
          type: string
      tags:
      - users
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPublicUserList'
          description: ''
  /v0/users/{id}/:
    get:
      operationId: users_retrieve
      description: Retrieve user by id
      summary: Retrieve User
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
          description: Unique identifier for this object
        required: true
      - in: query
        name: include
        schema:
          type: string
        explode: false
        style: form
      tags:
      - users
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
          description: ''
  /v0/users/me/:
    get:
      operationId: users_me_retrieve
      description: Retrieve the current user
      summary: Retrieve Me
      tags:
      - users
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: users_me_update
      description: Update the current user
      summary: Put Me
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
          description: ''
    patch:
      operationId: users_me_partial_update
      description: Partially update the current user
      summary: Patch Me
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
          description: ''
components:
  schemas:
    AuthToken:
      type: object
      properties:
        token:
          type: string
          readOnly: true
      required:
      - token
    AuthTokenError:
      type: object
      properties:
        email:
          type: array
          items:
            type: string
          readOnly: true
        password:
          type: array
          items:
            type: string
          readOnly: true
        token:
          type: array
          items:
            type: string
          readOnly: true
        non_field_errors:
          type: array
          items:
            type: string
          readOnly: true
      required:
      - email
      - non_field_errors
      - password
      - token
    AuthTokenRequest:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password
    Entry:
      type: object
      description: |-
        Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
        read only.

        GET /api/v1/people/5/
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [7]
        }

        GET /api/v1/people/5/?include=labels
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [
                {
                    "id": 7,
                    "name": "label-name"
                }
            ]
        }
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for this object
        author:
          type: string
          format: uuid
          description: Author of the entry.
          readOnly: true
        title:
          type: string
          format: uuid
          description: Title of the entry.
        content:
          description: Content of the entry. In tiptap format.
        is_draft:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Date and time this object was created
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Date and time this object was last updated
        vote:
          readOnly: true
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/VoteEnum'
          - $ref: '#/components/schemas/NullEnum'
        is_bookmarked:
          type: boolean
          readOnly: true
        like_count:
          type: integer
          readOnly: true
        dislike_count:
          type: integer
          readOnly: true
        bookmark_count:
          type: integer
          readOnly: true
      required:
      - author
      - bookmark_count
      - content
      - created_at
      - dislike_count
      - id
      - is_bookmarked
      - like_count
      - title
      - updated_at
      - vote
    EntryDestroyError:
      type: object
      properties:
        protected_elements:
          type: array
          items:
            $ref: '#/components/schemas/ProtectedElement'
      required:
      - protected_elements
    EntryError:
      type: object
      properties:
        id:
          type: array
          items:
            type: string
          readOnly: true
        author:
          type: array
          items:
            type: string
          readOnly: true
        title:
          type: array
          items:
            type: string
          readOnly: true
        content:
          type: array
          items:
            type: string
          readOnly: true
        is_draft:
          type: array
          items:
            type: string
          readOnly: true
        created_at:
          type: array
          items:
            type: string
          readOnly: true
        updated_at:
          type: array
          items:
            type: string
          readOnly: true
        vote:
          type: array
          items:
            type: string
          readOnly: true
        is_bookmarked:
          type: array
          items:
            type: string
          readOnly: true
        like_count:
          type: array
          items:
            type: string
          readOnly: true
        dislike_count:
          type: array
          items:
            type: string
          readOnly: true
        bookmark_count:
          type: array
          items:
            type: string
          readOnly: true
        non_field_errors:
          type: array
          items:
            type: string
          readOnly: true
      required:
      - author
      - bookmark_count
      - content
      - created_at
      - dislike_count
      - id
      - is_bookmarked
      - is_draft
      - like_count
      - non_field_errors
      - title
      - updated_at
      - vote
    EntryRequest:
      type: object
      description: |-
        Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
        read only.

        GET /api/v1/people/5/
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [7]
        }

        GET /api/v1/people/5/?include=labels
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [
                {
                    "id": 7,
                    "name": "label-name"
                }
            ]
        }
      properties:
        title:
          type: string
          format: uuid
          description: Title of the entry.
        content:
          description: Content of the entry. In tiptap format.
        is_draft:
          type: boolean
      required:
      - content
      - title
    EntryUpdateRequest:
      type: object
      description: |-
        Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
        read only.

        GET /api/v1/people/5/
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [7]
        }

        GET /api/v1/people/5/?include=labels
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [
                {
                    "id": 7,
                    "name": "label-name"
                }
            ]
        }
      properties:
        content:
          description: Content of the entry. In tiptap format.
        is_draft:
          type: boolean
      required:
      - content
    Forbidden:
      type: object
      properties:
        detail:
          type: string
      required:
      - detail
    Invitation:
      type: object
      description: |-
        Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
        read only.

        GET /api/v1/people/5/
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [7]
        }

        GET /api/v1/people/5/?include=labels
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [
                {
                    "id": 7,
                    "name": "label-name"
                }
            ]
        }
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for this object
        user:
          type: string
          format: uuid
          description: Owner of the invitation.
          readOnly: true
        code:
          type: string
          readOnly: true
          description: Invitation code.
        used_by:
          type: string
          format: uuid
          description: User who used the invitation.
          readOnly: true
          nullable: true
      required:
      - code
      - id
      - used_by
      - user
    InvitationError:
      type: object
      properties:
        id:
          type: array
          items:
            type: string
          readOnly: true
        user:
          type: array
          items:
            type: string
          readOnly: true
        code:
          type: array
          items:
            type: string
          readOnly: true
        used_by:
          type: array
          items:
            type: string
          readOnly: true
        non_field_errors:
          type: array
          items:
            type: string
          readOnly: true
      required:
      - code
      - id
      - non_field_errors
      - used_by
      - user
    NullEnum:
      enum:
      - null
    PaginatedEntryList:
      type: object
      properties:
        count:
          type: integer
          description: Total number of items available.
          example: 1102
        page_size:
          type: integer
          description: Number of results to return per page.
          example: 100
        total_pages:
          type: integer
          description: Total number of pages.
          example: 17
        results:
          type: array
          items:
            $ref: '#/components/schemas/Entry'
      required:
      - count
      - page_size
      - total_pages
      - results
    PaginatedInvitationList:
      type: object
      properties:
        count:
          type: integer
          description: Total number of items available.
          example: 1102
        page_size:
          type: integer
          description: Number of results to return per page.
          example: 100
        total_pages:
          type: integer
          description: Total number of pages.
          example: 17
        results:
          type: array
          items:
            $ref: '#/components/schemas/Invitation'
      required:
      - count
      - page_size
      - total_pages
      - results
    PaginatedPublicUserList:
      type: object
      properties:
        count:
          type: integer
          description: Total number of items available.
          example: 1102
        page_size:
          type: integer
          description: Number of results to return per page.
          example: 100
        total_pages:
          type: integer
          description: Total number of pages.
          example: 17
        results:
          type: array
          items:
            $ref: '#/components/schemas/PublicUser'
      required:
      - count
      - page_size
      - total_pages
      - results
    PaginatedTitleList:
      type: object
      properties:
        count:
          type: integer
          description: Total number of items available.
          example: 1102
        page_size:
          type: integer
          description: Number of results to return per page.
          example: 100
        total_pages:
          type: integer
          description: Total number of pages.
          example: 17
        results:
          type: array
          items:
            $ref: '#/components/schemas/Title'
      required:
      - count
      - page_size
      - total_pages
      - results
    PatchedEntryUpdateRequest:
      type: object
      description: |-
        Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
        read only.

        GET /api/v1/people/5/
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [7]
        }

        GET /api/v1/people/5/?include=labels
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [
                {
                    "id": 7,
                    "name": "label-name"
                }
            ]
        }
      properties:
        content:
          description: Content of the entry. In tiptap format.
        is_draft:
          type: boolean
    PatchedUserRequest:
      type: object
      description: |-
        Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
        read only.

        GET /api/v1/people/5/
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [7]
        }

        GET /api/v1/people/5/?include=labels
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [
                {
                    "id": 7,
                    "name": "label-name"
                }
            ]
        }
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    ProtectedElement:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        type:
          type: string
          readOnly: true
      required:
      - id
      - type
    PublicUser:
      type: object
      description: |-
        Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
        read only.

        GET /api/v1/people/5/
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [7]
        }

        GET /api/v1/people/5/?include=labels
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [
                {
                    "id": 7,
                    "name": "label-name"
                }
            ]
        }
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for this object
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters (lowercase), digits
            or hyphens only, can't start with digits or hyphens.
        is_active:
          type: boolean
          readOnly: true
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        is_staff:
          type: boolean
          readOnly: true
          title: Staff status
          description: Designates whether the user can log into this admin site.
        is_superuser:
          type: boolean
          readOnly: true
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        role:
          allOf:
          - $ref: '#/components/schemas/RoleEnum'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Date and time this object was created
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Date and time this object was last updated
        title_count:
          type: integer
          readOnly: true
        entry_count:
          type: integer
          readOnly: true
      required:
      - created_at
      - entry_count
      - id
      - is_active
      - is_staff
      - is_superuser
      - role
      - title_count
      - updated_at
      - username
    RoleEnum:
      enum:
      - READER
      - NEW_RECRUIT
      - CONTRIBUTOR
      - TRUSTED
      type: string
      description: |-
        * `READER` - Reader
        * `NEW_RECRUIT` - New Recruit
        * `CONTRIBUTOR` - Contributor
        * `TRUSTED` - Trusted
    SignupError:
      type: object
      properties:
        email:
          type: array
          items:
            type: string
          readOnly: true
        username:
          type: array
          items:
            type: string
          readOnly: true
        first_name:
          type: array
          items:
            type: string
          readOnly: true
        last_name:
          type: array
          items:
            type: string
          readOnly: true
        password:
          type: array
          items:
            type: string
          readOnly: true
        password_confirmation:
          type: array
          items:
            type: string
          readOnly: true
        invitation_code:
          type: array
          items:
            type: string
          readOnly: true
        non_field_errors:
          type: array
          items:
            type: string
          readOnly: true
      required:
      - email
      - first_name
      - invitation_code
      - last_name
      - non_field_errors
      - password
      - password_confirmation
      - username
    SignupRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 254
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters (lowercase), digits
            or hyphens only, can't start with digits or hyphens.
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 1
        password_confirmation:
          type: string
          writeOnly: true
          minLength: 1
        invitation_code:
          type: string
          writeOnly: true
          minLength: 8
          maxLength: 8
      required:
      - email
      - password
      - password_confirmation
      - username
    Title:
      type: object
      description: |-
        Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
        read only.

        GET /api/v1/people/5/
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [7]
        }

        GET /api/v1/people/5/?include=labels
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [
                {
                    "id": 7,
                    "name": "label-name"
                }
            ]
        }
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for this object
        name:
          type: string
          title: Title
          description: Name of the title.
          maxLength: 255
        slug:
          type: string
          readOnly: true
          description: Slug of the title to display in urls.
          pattern: ^[-a-zA-Z0-9_]+$
        entry_count:
          type: integer
          readOnly: true
        created_by:
          type: string
          format: uuid
          description: Creator of the title.
          readOnly: true
        is_bookmarked:
          type: boolean
          readOnly: true
      required:
      - created_by
      - entry_count
      - id
      - is_bookmarked
      - name
      - slug
    TitleDestroyError:
      type: object
      properties:
        protected_elements:
          type: array
          items:
            $ref: '#/components/schemas/ProtectedElement'
      required:
      - protected_elements
    TitleError:
      type: object
      properties:
        id:
          type: array
          items:
            type: string
          readOnly: true
        name:
          type: array
          items:
            type: string
          readOnly: true
        slug:
          type: array
          items:
            type: string
          readOnly: true
        entry_count:
          type: array
          items:
            type: string
          readOnly: true
        created_by:
          type: array
          items:
            type: string
          readOnly: true
        is_bookmarked:
          type: array
          items:
            type: string
          readOnly: true
        non_field_errors:
          type: array
          items:
            type: string
          readOnly: true
      required:
      - created_by
      - entry_count
      - id
      - is_bookmarked
      - name
      - non_field_errors
      - slug
    TitleRequest:
      type: object
      description: |-
        Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
        read only.

        GET /api/v1/people/5/
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [7]
        }

        GET /api/v1/people/5/?include=labels
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [
                {
                    "id": 7,
                    "name": "label-name"
                }
            ]
        }
      properties:
        name:
          type: string
          minLength: 1
          title: Title
          description: Name of the title.
          maxLength: 255
      required:
      - name
    User:
      type: object
      description: |-
        Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
        read only.

        GET /api/v1/people/5/
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [7]
        }

        GET /api/v1/people/5/?include=labels
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [
                {
                    "id": 7,
                    "name": "label-name"
                }
            ]
        }
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for this object
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters (lowercase), digits
            or hyphens only, can't start with digits or hyphens.
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        is_active:
          type: boolean
          readOnly: true
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        is_staff:
          type: boolean
          readOnly: true
          title: Staff status
          description: Designates whether the user can log into this admin site.
        is_superuser:
          type: boolean
          readOnly: true
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        role:
          allOf:
          - $ref: '#/components/schemas/RoleEnum'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Date and time this object was created
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Date and time this object was last updated
        title_count:
          type: integer
          readOnly: true
        entry_count:
          type: integer
          readOnly: true
      required:
      - created_at
      - email
      - entry_count
      - id
      - is_active
      - is_staff
      - is_superuser
      - role
      - title_count
      - updated_at
      - username
    UserError:
      type: object
      properties:
        id:
          type: array
          items:
            type: string
          readOnly: true
        username:
          type: array
          items:
            type: string
          readOnly: true
        first_name:
          type: array
          items:
            type: string
          readOnly: true
        last_name:
          type: array
          items:
            type: string
          readOnly: true
        email:
          type: array
          items:
            type: string
          readOnly: true
        is_active:
          type: array
          items:
            type: string
          readOnly: true
        is_staff:
          type: array
          items:
            type: string
          readOnly: true
        is_superuser:
          type: array
          items:
            type: string
          readOnly: true
        role:
          type: array
          items:
            type: string
          readOnly: true
        created_at:
          type: array
          items:
            type: string
          readOnly: true
        updated_at:
          type: array
          items:
            type: string
          readOnly: true
        title_count:
          type: array
          items:
            type: string
          readOnly: true
        entry_count:
          type: array
          items:
            type: string
          readOnly: true
        non_field_errors:
          type: array
          items:
            type: string
          readOnly: true
      required:
      - created_at
      - email
      - entry_count
      - first_name
      - id
      - is_active
      - is_staff
      - is_superuser
      - last_name
      - non_field_errors
      - role
      - title_count
      - updated_at
      - username
    UserRequest:
      type: object
      description: |-
        Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
        read only.

        GET /api/v1/people/5/
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [7]
        }

        GET /api/v1/people/5/?include=labels
        {
            "id": 5,
            "first_name": "John",
            "last_name": "Doe",
            "labels": [
                {
                    "id": 7,
                    "name": "label-name"
                }
            ]
        }
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    VerifyEmailError:
      type: object
      properties:
        token:
          type: array
          items:
            type: string
          readOnly: true
        uidb64:
          type: array
          items:
            type: string
          readOnly: true
        non_field_errors:
          type: array
          items:
            type: string
          readOnly: true
      required:
      - non_field_errors
      - token
      - uidb64
    VerifyEmailRequest:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
          minLength: 1
        uidb64:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - token
      - uidb64
    VoteEnum:
      enum:
      - UPVOTE
      - DOWNVOTE
      type: string
      description: |-
        * `UPVOTE` - Upvote
        * `DOWNVOTE` - Downvote
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
