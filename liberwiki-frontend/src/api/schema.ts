/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v0/entries/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List Entries
     * @description List entries with optional filters
     */
    get: operations['entries_list']
    put?: never
    /**
     * Create Entry
     * @description Permissions:
     *         READER can't create entries,
     *         NEW_RECRUIT can create 1 entry per day,
     *         CONTRIBUTOR and TRUSTED can create as many entries as they want.
     *
     */
    post: operations['entries_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/entries/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve Entry
     * @description Retrieve entry by id
     */
    get: operations['entries_retrieve']
    /**
     * Put Entry
     * @description Only the author can update the entry.
     */
    put: operations['entries_update']
    post?: never
    /**
     * Delete Entry
     * @description Only the author can delete the entry.
     */
    delete: operations['entries_destroy']
    options?: never
    head?: never
    /**
     * Patch Entry
     * @description Only the author can update the entry.
     */
    patch: operations['entries_partial_update']
    trace?: never
  }
  '/v0/entries/{id}/bookmark/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Bookmark Entry
     * @description Bookmark an entry by id
     */
    post: operations['entries_bookmark_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/entries/{id}/downvote/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Downvote Entry
     * @description Cast an up vote to an entry by id
     */
    post: operations['entries_downvote_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/entries/{id}/unbookmark/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Remove Entry Bookmark
     * @description Remove bookmark from entry by id
     */
    post: operations['entries_unbookmark_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/entries/{id}/unvote/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Remove Entry Vote
     * @description Remove vote from entry by id
     */
    post: operations['entries_unvote_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/entries/{id}/upvote/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Upvote Entry
     * @description Cast a down vote to an entry by id
     */
    post: operations['entries_upvote_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/invitations/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List Invitations
     * @description List invitations with optional filters
     */
    get: operations['invitations_list']
    put?: never
    /**
     * Create Invitation
     * @description Permissions:
     *         READER can't create invites,
     *         NEW_RECRUIT can't create invites,
     *         CONTRIBUTOR can create 1 invite until that user is processed.
     *         TRUSTED can create as many invites as they want.
     *
     */
    post: operations['invitations_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/invitations/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve Invitation
     * @description Retrieve invitation by id
     */
    get: operations['invitations_retrieve']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/titles/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List Titles
     * @description List titles with optional filters
     */
    get: operations['titles_list']
    put?: never
    /**
     * Create Title
     * @description Create a new title
     */
    post: operations['titles_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/titles/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve Title
     * @description Retrieve title by id
     */
    get: operations['titles_retrieve']
    put?: never
    post?: never
    /**
     * Delete Title
     * @description Delete an existing Title by id
     */
    delete: operations['titles_destroy']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/titles/{id}/bookmark/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Bookmark Title
     * @description Bookmark a title by id
     */
    post: operations['titles_bookmark_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/titles/{id}/unbookmark/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Remove Title Bookmark
     * @description Remove bookmark from title by id
     */
    post: operations['titles_unbookmark_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/users/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List Users
     * @description List users with optional filters
     */
    get: operations['users_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/users/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve User
     * @description Retrieve user by id
     */
    get: operations['users_retrieve']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/users/me/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve Me
     * @description Retrieve the current user
     */
    get: operations['users_me_retrieve']
    /**
     * Put Me
     * @description Update the current user
     */
    put: operations['users_me_update']
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Patch Me
     * @description Partially update the current user
     */
    patch: operations['users_me_partial_update']
    trace?: never
  }
  '/v0/users/me/complete-signup/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Complete Signup
     * @description Complete the signup process for the current user
     */
    post: operations['users_me_complete_signup_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    Entry: {
      /**
       * Format: uuid
       * @description Unique identifier for this object
       */
      readonly id: string
      /**
       * Format: uuid
       * @description Author of the entry.
       */
      readonly author: string
      /**
       * Format: uuid
       * @description Title of the entry.
       */
      title: string
      /** @description Content of the entry. In tiptap format. */
      content: unknown
      is_draft?: boolean
      /**
       * Format: date-time
       * @description Date and time this object was created
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @description Date and time this object was last updated
       */
      readonly updated_at: string
      readonly vote: (components['schemas']['VoteEnum'] | components['schemas']['NullEnum']) | null
      readonly is_bookmarked: boolean
      readonly like_count: number
      readonly dislike_count: number
      readonly bookmark_count: number
    }
    EntryDestroyError: {
      protected_elements: components['schemas']['ProtectedElement'][]
    }
    EntryError: {
      readonly id: string[]
      readonly author: string[]
      readonly title: string[]
      readonly content: string[]
      readonly is_draft: string[]
      readonly created_at: string[]
      readonly updated_at: string[]
      readonly vote: string[]
      readonly is_bookmarked: string[]
      readonly like_count: string[]
      readonly dislike_count: string[]
      readonly bookmark_count: string[]
      readonly non_field_errors: string[]
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    EntryRequest: {
      /**
       * Format: uuid
       * @description Title of the entry.
       */
      title: string
      /** @description Content of the entry. In tiptap format. */
      content: unknown
      is_draft?: boolean
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    EntryUpdateRequest: {
      /** @description Content of the entry. In tiptap format. */
      content: unknown
      is_draft?: boolean
    }
    Forbidden: {
      detail: string
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    Invitation: {
      /**
       * Format: uuid
       * @description Unique identifier for this object
       */
      readonly id: string
      /**
       * Format: uuid
       * @description Owner of the invitation.
       */
      readonly user: string
      /** @description Invitation code. */
      readonly code: string
      /**
       * Format: uuid
       * @description User who used the invitation.
       */
      readonly used_by: string | null
    }
    InvitationError: {
      readonly id: string[]
      readonly user: string[]
      readonly code: string[]
      readonly used_by: string[]
      readonly non_field_errors: string[]
    }
    /** @enum {unknown} */
    NullEnum: null
    PaginatedEntryList: {
      /**
       * @description Total number of items available.
       * @example 1102
       */
      count: number
      /**
       * @description Number of results to return per page.
       * @example 100
       */
      page_size: number
      /**
       * @description Total number of pages.
       * @example 17
       */
      total_pages: number
      results: components['schemas']['Entry'][]
    }
    PaginatedInvitationList: {
      /**
       * @description Total number of items available.
       * @example 1102
       */
      count: number
      /**
       * @description Number of results to return per page.
       * @example 100
       */
      page_size: number
      /**
       * @description Total number of pages.
       * @example 17
       */
      total_pages: number
      results: components['schemas']['Invitation'][]
    }
    PaginatedPublicUserList: {
      /**
       * @description Total number of items available.
       * @example 1102
       */
      count: number
      /**
       * @description Number of results to return per page.
       * @example 100
       */
      page_size: number
      /**
       * @description Total number of pages.
       * @example 17
       */
      total_pages: number
      results: components['schemas']['PublicUser'][]
    }
    PaginatedTitleList: {
      /**
       * @description Total number of items available.
       * @example 1102
       */
      count: number
      /**
       * @description Number of results to return per page.
       * @example 100
       */
      page_size: number
      /**
       * @description Total number of pages.
       * @example 17
       */
      total_pages: number
      results: components['schemas']['Title'][]
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    PatchedEntryUpdateRequest: {
      /** @description Content of the entry. In tiptap format. */
      content?: unknown
      is_draft?: boolean
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    PatchedUserRequest: {
      first_name?: string
      last_name?: string
    }
    ProtectedElement: {
      /** Format: uuid */
      readonly id: string
      readonly type: string
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    PublicUser: {
      /**
       * Format: uuid
       * @description Unique identifier for this object
       */
      readonly id: string
      /** @description Required. 150 characters or fewer. Letters (lowercase), digits or hyphens only, can't start with digits or hyphens. */
      readonly username: string
      /**
       * Active
       * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
       */
      readonly is_active: boolean
      /**
       * Staff status
       * @description Designates whether the user can log into this admin site.
       */
      readonly is_staff: boolean
      /**
       * Superuser status
       * @description Designates that this user has all permissions without explicitly assigning them.
       */
      readonly is_superuser: boolean
      readonly role: components['schemas']['RoleEnum']
      /**
       * Format: date-time
       * @description Date and time this object was created
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @description Date and time this object was last updated
       */
      readonly updated_at: string
      readonly title_count: number
      readonly entry_count: number
    }
    /**
     * @description * `READER` - Reader
     *     * `NEW_RECRUIT` - New Recruit
     *     * `CONTRIBUTOR` - Contributor
     *     * `TRUSTED` - Trusted
     * @enum {string}
     */
    RoleEnum: 'READER' | 'NEW_RECRUIT' | 'CONTRIBUTOR' | 'TRUSTED'
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    Title: {
      /**
       * Format: uuid
       * @description Unique identifier for this object
       */
      readonly id: string
      /**
       * Title
       * @description Name of the title.
       */
      name: string
      /** @description Slug of the title to display in urls. */
      readonly slug: string
      readonly entry_count: number
      /**
       * Format: uuid
       * @description Creator of the title.
       */
      readonly created_by: string
      readonly is_bookmarked: boolean
    }
    TitleDestroyError: {
      protected_elements: components['schemas']['ProtectedElement'][]
    }
    TitleError: {
      readonly id: string[]
      readonly name: string[]
      readonly slug: string[]
      readonly entry_count: string[]
      readonly created_by: string[]
      readonly is_bookmarked: string[]
      readonly non_field_errors: string[]
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    TitleRequest: {
      /**
       * Title
       * @description Name of the title.
       */
      name: string
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    User: {
      /**
       * Format: uuid
       * @description Unique identifier for this object
       */
      readonly id: string
      /** @description Required. 150 characters or fewer. Letters (lowercase), digits or hyphens only, can't start with digits or hyphens. */
      readonly username: string
      first_name?: string
      last_name?: string
      /**
       * Email address
       * Format: email
       */
      readonly email: string
      /**
       * Active
       * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
       */
      readonly is_active: boolean
      /**
       * Staff status
       * @description Designates whether the user can log into this admin site.
       */
      readonly is_staff: boolean
      /**
       * Superuser status
       * @description Designates that this user has all permissions without explicitly assigning them.
       */
      readonly is_superuser: boolean
      readonly role: components['schemas']['RoleEnum']
      /**
       * Format: date-time
       * @description Date and time this object was created
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @description Date and time this object was last updated
       */
      readonly updated_at: string
      readonly title_count: number
      readonly entry_count: number
      readonly signup_completed: string
    }
    UserCompleteSignupError: {
      readonly username: string[]
      readonly password: string[]
      readonly non_field_errors: string[]
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    UserCompleteSignupRequest: {
      /** @description Required. 150 characters or fewer. Letters (lowercase), digits or hyphens only, can't start with digits or hyphens. */
      username: string
      password: string
    }
    UserError: {
      readonly id: string[]
      readonly username: string[]
      readonly first_name: string[]
      readonly last_name: string[]
      readonly email: string[]
      readonly is_active: string[]
      readonly is_staff: string[]
      readonly is_superuser: string[]
      readonly role: string[]
      readonly created_at: string[]
      readonly updated_at: string[]
      readonly title_count: string[]
      readonly entry_count: string[]
      readonly signup_completed: string[]
      readonly non_field_errors: string[]
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    UserRequest: {
      first_name?: string
      last_name?: string
    }
    /**
     * @description * `UPVOTE` - Upvote
     *     * `DOWNVOTE` - Downvote
     * @enum {string}
     */
    VoteEnum: 'UPVOTE' | 'DOWNVOTE'
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  entries_list: {
    parameters: {
      query?: {
        /** @description Unique identifier for this object */
        author?: string
        author__username?: string
        bookmark_count?: number
        bookmark_count__gt?: number
        bookmark_count__gte?: number
        bookmark_count__lt?: number
        bookmark_count__lte?: number
        created_at?: string
        created_at__gt?: string
        created_at__gte?: string
        created_at__lt?: string
        created_at__lte?: string
        dislike_count?: number
        dislike_count__gt?: number
        dislike_count__gte?: number
        dislike_count__lt?: number
        dislike_count__lte?: number
        include?: 'author' | 'author,title' | 'title'
        is_bookmarked?: boolean
        is_draft?: boolean
        like_count?: number
        like_count__gt?: number
        like_count__gte?: number
        like_count__lt?: number
        like_count__lte?: number
        ordering?:
          | '-bookmark_count'
          | '-created_at'
          | '-dislike_count'
          | '-like_count'
          | '-updated_at'
          | 'bookmark_count'
          | 'created_at'
          | 'dislike_count'
          | 'like_count'
          | 'updated_at'
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term. */
        search?: string
        /** @description Unique identifier for this object */
        title?: string
        title__slug?: string
        updated_at?: string
        updated_at__gt?: string
        updated_at__gte?: string
        updated_at__lt?: string
        updated_at__lte?: string
        /** @description * `UPVOTE` - Upvote
         *     * `DOWNVOTE` - Downvote */
        vote?: 'DOWNVOTE' | 'UPVOTE'
        vote__isnull?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedEntryList']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  entries_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EntryRequest']
        'application/x-www-form-urlencoded': components['schemas']['EntryRequest']
        'multipart/form-data': components['schemas']['EntryRequest']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Entry']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EntryError']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  entries_retrieve: {
    parameters: {
      query?: {
        include?: 'author' | 'author,title' | 'title'
      }
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Entry']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  entries_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EntryUpdateRequest']
        'application/x-www-form-urlencoded': components['schemas']['EntryUpdateRequest']
        'multipart/form-data': components['schemas']['EntryUpdateRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Entry']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EntryError']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  entries_destroy: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EntryDestroyError']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  entries_partial_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedEntryUpdateRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedEntryUpdateRequest']
        'multipart/form-data': components['schemas']['PatchedEntryUpdateRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Entry']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EntryError']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  entries_bookmark_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  entries_downvote_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  entries_unbookmark_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  entries_unvote_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  entries_upvote_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  invitations_list: {
    parameters: {
      query?: {
        include?: 'used_by'
        ordering?: string
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term. */
        search?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedInvitationList']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  invitations_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Invitation']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InvitationError']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  invitations_retrieve: {
    parameters: {
      query?: {
        include?: 'used_by'
      }
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Invitation']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  titles_list: {
    parameters: {
      query?: {
        created_at?: string
        created_at__gt?: string
        created_at__gte?: string
        created_at__lt?: string
        created_at__lte?: string
        entry_count?: number
        entry_count__gt?: number
        entry_count__gte?: number
        entry_count__lt?: number
        entry_count__lte?: number
        include?: 'created_by'
        name?: string
        name__contains?: string
        name__icontains?: string
        name__iexact?: string
        ordering?: string
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term. */
        search?: string
        slug?: string
        updated_at?: string
        updated_at__gt?: string
        updated_at__gte?: string
        updated_at__lt?: string
        updated_at__lte?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedTitleList']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  titles_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TitleRequest']
        'application/x-www-form-urlencoded': components['schemas']['TitleRequest']
        'multipart/form-data': components['schemas']['TitleRequest']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Title']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TitleError']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  titles_retrieve: {
    parameters: {
      query?: {
        include?: 'created_by'
      }
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Title']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  titles_destroy: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TitleDestroyError']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  titles_bookmark_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  titles_unbookmark_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  users_list: {
    parameters: {
      query?: {
        created_at?: string
        created_at__gt?: string
        created_at__gte?: string
        created_at__lt?: string
        created_at__lte?: string
        entry_count?: number
        entry_count__gt?: number
        entry_count__gte?: number
        entry_count__lt?: number
        entry_count__lte?: number
        include?: string
        is_active?: boolean
        is_staff?: boolean
        is_superuser?: boolean
        ordering?: string
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term. */
        search?: string
        title_count?: number
        title_count__gt?: number
        title_count__gte?: number
        title_count__lt?: number
        title_count__lte?: number
        updated_at?: string
        updated_at__gt?: string
        updated_at__gte?: string
        updated_at__lt?: string
        updated_at__lte?: string
        username__icontains?: string
        username__iexact?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedPublicUserList']
        }
      }
    }
  }
  users_retrieve: {
    parameters: {
      query?: {
        include?: string
      }
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PublicUser']
        }
      }
    }
  }
  users_me_retrieve: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
    }
  }
  users_me_update: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserRequest']
        'application/x-www-form-urlencoded': components['schemas']['UserRequest']
        'multipart/form-data': components['schemas']['UserRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserError']
        }
      }
    }
  }
  users_me_partial_update: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedUserRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedUserRequest']
        'multipart/form-data': components['schemas']['PatchedUserRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserError']
        }
      }
    }
  }
  users_me_complete_signup_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserCompleteSignupRequest']
        'application/x-www-form-urlencoded': components['schemas']['UserCompleteSignupRequest']
        'multipart/form-data': components['schemas']['UserCompleteSignupRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserCompleteSignupError']
        }
      }
    }
  }
}
