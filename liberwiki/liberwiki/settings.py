"""
Django settings for liberwiki project.
Generated by 'django-admin startproject' using Django 5.1.
"""

import itertools
from pathlib import Path

import sentry_sdk
from corsheaders.defaults import default_headers
from django.utils.translation import gettext_lazy as _

from liberwiki.config import CONFIG as config  # Django thinks config is a settings if it is all caps  # NOQA

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = config.SECRET_KEY
DEBUG = config.DEBUG
ALLOWED_HOSTS = config.ALLOWED_HOSTS
PROTOCOL = "https" if not DEBUG else "http"

# Application definition
INSTALLED_APPS = [
    "whitenoise.runserver_nostatic",
    "core.apps.CoreConfig",
    "common.apps.CommonConfig",
    "pgtrigger",
    "pghistory",
    "pghistory.admin",
    "colorfield",
    "admin_interface",
    "corsheaders",
    "rest_framework",
    "rest_framework.authtoken",
    "administration.apps.AdministrationConfig",  # Needs to be after admin_interface + rest_framework.authtoken
    "django_filters",
    "more_admin_filters",
    "drf_spectacular",
    "django_hosts",
    "django_extensions",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "allauth",
    "allauth.headless",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.microsoft",
    "allauth.socialaccount.providers.apple",
    "allauth.socialaccount.providers.github",
    "allauth.socialaccount.providers.discord",
    "allauth.socialaccount.providers.reddit",
]

MIDDLEWARE = [
    "django_hosts.middleware.HostsRequestMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "pghistory.middleware.HistoryMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    # "django.contrib.sessions.middleware.SessionMiddleware",
    "core.middleware.session.CookieORHeaderSessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_hosts.middleware.HostsResponseMiddleware",
]

DOMAIN = PARENT_HOST = config.HOSTS.DOMAIN
ADMIN_SUBDOMAIN = config.HOSTS.ADMIN_SUBDOMAIN
API_SUBDOMAIN = config.HOSTS.API_SUBDOMAIN
AUTH_SUBDOMAIN = config.HOSTS.AUTH_SUBDOMAIN
OAUTH2_REDIRECT_DOMAIN_OVERRIDE = config.APP.OAUTH2_REDIRECT_DOMAIN_OVERRIDE

ROOT_URLCONF = "liberwiki.urls.root"
ROOT_HOSTCONF = "liberwiki.hosts"
DEFAULT_HOST = API_SUBDOMAIN

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "builtins": [
                "django.templatetags.i18n",
            ],
        },
    },
]

WSGI_APPLICATION = "liberwiki.wsgi.application"

# Database
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config.DB.NAME,
        "USER": config.DB.USER,
        "PASSWORD": config.DB.PASSWORD,
        "HOST": config.DB.HOST,
        "PORT": config.DB.PORT,
    }
}

# AUTH
AUTH_USER_MODEL = "core.User"

ACCOUNT_ADAPTER = "core.backends.allauth.LiberWikiAllauthAccountAdapter"
SOCIALACCOUNT_ADAPTER = "core.backends.allauth.LiberWikiAllauthSocialAccountAdapter"
HEADLESS_ADAPTER = "core.backends.allauth.LiberWikiAllauthHeadlessAccountAdapter"
ACCOUNT_SIGNUP_FIELDS = ["email*", "username*"]
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = False
ACCOUNT_EMAIL_VERIFICATION_BY_CODE_ENABLED = False
ACCOUNT_LOGIN_METHODS = ["username", "email"]
ACCOUNT_DEFAULT_HTTP_PROTOCOL = PROTOCOL


SOCIALACCOUNT_EMAIL_AUTHENTICATION = True
SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True
SOCIALACCOUNT_STORE_TOKENS = True

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

HEADLESS_ONLY = True
HEADLESS_FRONTEND_URLS = {
    "account_confirm_email": f"{PROTOCOL}://{DOMAIN}/auth/verify-email/{{key}}",
    "account_signup": f"{PROTOCOL}://{DOMAIN}/auth/signup",
    "account_reset_password": f"{PROTOCOL}://{DOMAIN}/auth/password-reset",
    "account_reset_password_from_key": f"{PROTOCOL}://{DOMAIN}/auth/password-reset/{{key}}",
    "socialaccount_login_error": f"{PROTOCOL}://{DOMAIN}/auth/provider-error",
}

SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APP": {
            "client_id": config.OAUTH.GOOGLE.CLIENT_ID,
            "secret": config.OAUTH.GOOGLE.CLIENT_SECRET,
        },
        "SCOPE": ["profile", "email"],
        "AUTH_PARAMS": {
            "access_type": "offline",
        },
        "OAUTH_PKCE_ENABLED": True,
        "VERIFIED_EMAIL": True,
    },
    "microsoft": {
        "APPS": [
            {
                "client_id": config.OAUTH.MICROSOFT.CLIENT_ID,
                "secret": config.OAUTH.MICROSOFT.CLIENT_SECRET,
                "settings": {
                    "tenant": "consumers",
                },
            },
        ],
        "VERIFIED_EMAIL": True,
    },
}

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator", "OPTIONS": {"min_length": 12}},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
LANGUAGE_CODE = config.LANGUAGE
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True
LANGUAGES = [
    ("en", _("English")),
    ("tr", _("Turkish")),
]
LOCALE_PATHS = [BASE_DIR / "locale"]

# Static files (CSS, JavaScript, Images)
STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "PAGE_SIZE": 100,
    "DEFAULT_PAGINATION_CLASS": "rest.utils.pagination.PageNumberPagination",
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PERMISSION_CLASSES": [
        "rest.utils.permissions.ReadOnly",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
}

SPECTACULAR_SETTINGS = {
    "TITLE": "LiberWiki API",
    "DESCRIPTION": f"LiberWiki API",
    "VERSION": "0.1.0",
    "COMPONENT_SPLIT_REQUEST": True,
}

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = config.EMAIL.SMTP.HOST
EMAIL_PORT = config.EMAIL.SMTP.PORT.TSL
EMAIL_HOST_USER = config.EMAIL.SMTP.USER
EMAIL_HOST_PASSWORD = config.EMAIL.SMTP.PASSWORD
EMAIL_USE_TSL = True
DEFAULT_AUTH_FROM_EMAIL = config.EMAIL.DEFAULT_AUTH_FROM_EMAIL

AUTH_COOKIE_DOMAIN = config.APP.AUTH_COOKIE_DOMAIN
SESSION_COOKIE_DOMAIN = f"{AUTH_COOKIE_DOMAIN}" if AUTH_COOKIE_DOMAIN else f".{DOMAIN}"
CSRF_COOKIE_DOMAIN = f"{AUTH_COOKIE_DOMAIN}" if AUTH_COOKIE_DOMAIN else f".{DOMAIN}"

CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
ACAHP = AUTH_COOKIE_AND_HEADER_PREFIX = config.APP.AUTH_COOKIE_AND_HEADER_PREFIX
COOKIE_PREFIX, HEADER_PREFIX = (f"{ACAHP}_".lower(), ACAHP) if ACAHP else ("", "")
CSRF_COOKIE_NAME = COOKIE_PREFIX + "csrftoken"
SESSION_COOKIE_NAME = COOKIE_PREFIX + "sessionid"
CSRF_HEADER_NAME = f"HTTP_X_{HEADER_PREFIX.upper()}_CSRFTOKEN" if HEADER_PREFIX else "HTTP_X_CSRFTOKEN"
CSRF_HEADER_NORMALIZED = f"X-{HEADER_PREFIX.capitalize()}-CSRFToken" if HEADER_PREFIX else "X-CSRFToken"
SESSION_HEADER_NAME = f"X-{HEADER_PREFIX.capitalize()}-Session-Token" if HEADER_PREFIX else "X-Session-Token"

X_FRAME_OPTIONS = "SAMEORIGIN"

http_https = lambda domain: [f"http://{domain}", f"https://{domain}"]  # NOQA

DOMAINS = [
    DOMAIN,
    f"{ADMIN_SUBDOMAIN}.{DOMAIN}",
    f"{API_SUBDOMAIN}.{DOMAIN}",
    f"{AUTH_SUBDOMAIN}.{DOMAIN}",
]

CORS_ALLOWED_ORIGINS = list(itertools.chain.from_iterable(map(http_https, DOMAINS)))
CSRF_TRUSTED_ORIGINS = list(itertools.chain.from_iterable(map(http_https, DOMAINS)))
CORS_ALLOW_HEADERS = default_headers + (SESSION_HEADER_NAME, CSRF_HEADER_NORMALIZED)
CORS_ALLOW_CREDENTIALS = True

# CORE APP BEHAVIOR SETTINGS
TITLE_NAME_ALLOWED_EXTRA_CHARS = config.APP.TITLE_NAME_ALLOWED_EXTRA_CHARS
TITLE_SLUG_CHARACTERS_LANGUAGE_MAP = config.APP.TITLE_SLUG_CHARACTERS_LANGUAGE_MAP
# Format of the above setting is lang-specific-char:url-friendly-char,lang-specific-char2:url-friendly-char2
# Example: ı:i,ş:s,ğ:g

if not DEBUG:
    sentry_sdk.init(
        dsn=config.DEVTOOLS.SENTRY.DSN,
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for tracing.
        traces_sample_rate=config.DEVTOOLS.SENTRY.TRACES_SAMPLE_RATE,
        _experiments={
            # Set continuous_profiling_auto_start to True
            # to automatically start the profiler on when
            # possible.
            "continuous_profiling_auto_start": True,
        },
        debug=config.DEBUG,
    )

if DEBUG:
    # Some stuff here are hardcoded, like dev ports.
    # This would break for instance when the ports change for development servers
    # TODO: handle these better
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False
    PORTS = ["80", "3000", "8000", "443"]
    ORIGINS_HTTP = [f"http://{d}:{p}" for d in DOMAINS for p in PORTS] + [f"http://{d}" for d in DOMAINS]
    ORIGINS_HTTPS = [f"https://{d}:{p}" for d in DOMAINS for p in PORTS] + [f"https://{d}" for d in DOMAINS]
    CORS_ALLOWED_ORIGINS = ORIGINS_HTTP + ORIGINS_HTTPS
    CSRF_TRUSTED_ORIGINS = ORIGINS_HTTP + ORIGINS_HTTPS
